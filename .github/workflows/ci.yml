name: Docker Build and Push

# Trigger workflow on push to master branch
on:
  push:
    branches: [ "master" ]
    paths:               # Trigger only when the following paths change
     - 'crates/**/src/**'
     - '**/Cargo.toml'
     - '**/Cargo.lock'
     - 'crates/**/Dockerfile'
     - 'crates/**/abi/**'
     - '.github/workflows/ci.yml'
  workflow_dispatch: # Manual trigger method

env:
  REGISTRY: ghcr.io
  # Image name prefix in GHCR format; ${{ github.repository }} resolves to 'owner/repo'.
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}

jobs:
  build-and-push:
    strategy:
      fail-fast: false
      # The build matrix now explicitly lists all services to be built.
      matrix:
        crate: [ "source-uniswap" ]
    #  Execution environment
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx, an advanced container builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} #  Use the repository owner's name
          password: ${{ secrets.GITHUB_TOKEN }}    # Use the auto-generated GITHUB_TOKEN

      # Step 4: Build and push the Docker image
      - name: Build and push ${{ matrix.crate }}
        uses: docker/build-push-action@v5
        with:
          context: .
          # Use the generic Dockerfile template for all services.
          file: ./Dockerfile
          # Pass the crate name as a build argument to the Dockerfile.
          build-args: |
            CRATE_NAME=${{ matrix.crate }}
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}/${{ matrix.crate }}:${{ github.sha }}
            ${{ env.IMAGE_PREFIX }}/${{ matrix.crate }}:edge
          # Enable build cache. It uses GitHub Actions' cache backend to store Docker layers.
          cache-from: type=gha
          cache-to: type=gha,mode=max
